AWSTemplateFormatVersion: 2010-09-09

Description: AutoScaling Group with Launch Template and Scaling Policy
  
Parameters:
  pVPC:
    Description: VPC for EC2 Instances
    Type: AWS::EC2::VPC::Id
  
  pInstanceType:
    Description: Instance Type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t2.nano
      - t3.nano

  pKeyPair:
    Description: Key name for EC2
    Type: AWS::EC2::KeyPair::KeyName

  MySebnetList:
    Description: List of subnets for load balancer
    Type: List<AWS::EC2::Subnet::Id>

Mappings:
  RegionImageMap:
    us-east-1:
      AMI: ami-0dc2d3e4c0f9ebd18
    us-east-2:
      AMI: ami-0233c2d874b811deb
    us-west-1:
      AMI: ami-0ed05376b59b90e46
    us-west-2:
      AMI: ami-0dc8f589abe99f538
    eu-west-1:
      AMI: ami-058b1b7fe545997ae

Resources:
  mySG:
    Type: AWS::EC2::SecurityGroup
    Properties:
       GroupDescription: Enable SSH and HTTP # Required
       GroupName: Burak-SG-ASG
       SecurityGroupIngress:
         - CidrIp: 0.0.0.0/0
           FromPort: 22
           IpProtocol: tcp # Required
           ToPort: 22   
         - CidrIp: 0.0.0.0/0
           FromPort: 80
           IpProtocol: tcp # Required
           ToPort: 80   
       VpcId: !Ref pVPC

  myTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3
      VpcId: !Ref pVPC

  myLT:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
          ImageId: !FindInMap 
            - RegionImageMap
            - !Ref AWS::Region
            - AMI
          InstanceType: !Ref pInstanceType
          KeyName: !Ref pKeyPair
          SecurityGroupIds: 
              - !GetAtt mySG.GroupId
          UserData: !Base64 |
              #! /bin/bash
              yum update -y
              yum install -y httpd
              TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
              && PRIVATE_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4`
              TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"` \
              && PUBLIC_IP=`curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/public-ipv4` 
              DATE_TIME=`date`
              chmod -R 777 /var/www/html
              echo "<html>
              <head>
                  <title> Congratulations! You have created an instance from Launch Template</title>
              </head>
              <body>
                  <h1>This web server is launched from launch template by BURAK</h1>
                  <p>This instance is created at <b>$DATE_TIME</b></p>
                  <p>Private IP address of this instance is <b>$PRIVATE_IP</b></p>
                  <p>Public IP address of this instance is <b>$PUBLIC_IP</b></p>
              </body>
              </html>" > /var/www/html/index.html
              systemctl start httpd
              systemctl enable httpd


  myCPUPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref MyASG # Required
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 60.0

  MyASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs
      DesiredCapacity: "2"
      HealthCheckGracePeriod: 90
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId: !Ref myLT
        Version: !GetAtt myLT.LatestVersionNumber
      MaxSize: "3" # Required
      MinSize: "1" # Required
      TargetGroupARNs:
        - !Ref myTG

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: # Required
        - TargetGroupArn: !Ref myTG
          Type: forward
      LoadBalancerArn: !Ref MyLoadBalancer # Required
      Port: 80
      Protocol: HTTP
      
  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !GetAtt mySG.GroupId
      Subnets: !Ref MySebnetList
      Type: application
      
Outputs:

  AppUrl:
    Description: Url of ALB
    Value: !Join
    - '' #delimiter
    - - 'http://'
      - !GetAtt MyLoadBalancer.DNSName
    